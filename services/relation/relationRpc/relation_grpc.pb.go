// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: proto/relation.proto

package relationRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RelationService_Follow_FullMethodName           = "/relationRpc.RelationService/follow"
	RelationService_CancelFollow_FullMethodName     = "/relationRpc.RelationService/cancelFollow"
	RelationService_ListFollowing_FullMethodName    = "/relationRpc.RelationService/listFollowing"
	RelationService_IsFollowing_FullMethodName      = "/relationRpc.RelationService/isFollowing"
	RelationService_ListFollower_FullMethodName     = "/relationRpc.RelationService/listFollower"
	RelationService_ListAllFollower_FullMethodName  = "/relationRpc.RelationService/listAllFollower"
	RelationService_GetFollowingNums_FullMethodName = "/relationRpc.RelationService/getFollowingNums"
	RelationService_GetFollowerNums_FullMethodName  = "/relationRpc.RelationService/getFollowerNums"
)

// RelationServiceClient is the client API for RelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationServiceClient interface {
	Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*Empty, error)
	CancelFollow(ctx context.Context, in *CancelFollowReq, opts ...grpc.CallOption) (*Empty, error)
	ListFollowing(ctx context.Context, in *ListFollowingReq, opts ...grpc.CallOption) (*ListFollowingResp, error)
	IsFollowing(ctx context.Context, in *IsFollowingReq, opts ...grpc.CallOption) (*IsFollowingResp, error)
	ListFollower(ctx context.Context, in *ListFollowerReq, opts ...grpc.CallOption) (*ListFollowerResp, error)
	ListAllFollower(ctx context.Context, in *ListAllFollowerReq, opts ...grpc.CallOption) (*ListFollowerResp, error)
	GetFollowingNums(ctx context.Context, in *GetFollowingNumsReq, opts ...grpc.CallOption) (*GetFollowingNumsResp, error)
	GetFollowerNums(ctx context.Context, in *GetFollowerNumsReq, opts ...grpc.CallOption) (*GetFollowerNumsResp, error)
}

type relationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationServiceClient(cc grpc.ClientConnInterface) RelationServiceClient {
	return &relationServiceClient{cc}
}

func (c *relationServiceClient) Follow(ctx context.Context, in *FollowReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RelationService_Follow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) CancelFollow(ctx context.Context, in *CancelFollowReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, RelationService_CancelFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) ListFollowing(ctx context.Context, in *ListFollowingReq, opts ...grpc.CallOption) (*ListFollowingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFollowingResp)
	err := c.cc.Invoke(ctx, RelationService_ListFollowing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) IsFollowing(ctx context.Context, in *IsFollowingReq, opts ...grpc.CallOption) (*IsFollowingResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsFollowingResp)
	err := c.cc.Invoke(ctx, RelationService_IsFollowing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) ListFollower(ctx context.Context, in *ListFollowerReq, opts ...grpc.CallOption) (*ListFollowerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFollowerResp)
	err := c.cc.Invoke(ctx, RelationService_ListFollower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) ListAllFollower(ctx context.Context, in *ListAllFollowerReq, opts ...grpc.CallOption) (*ListFollowerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFollowerResp)
	err := c.cc.Invoke(ctx, RelationService_ListAllFollower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetFollowingNums(ctx context.Context, in *GetFollowingNumsReq, opts ...grpc.CallOption) (*GetFollowingNumsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFollowingNumsResp)
	err := c.cc.Invoke(ctx, RelationService_GetFollowingNums_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetFollowerNums(ctx context.Context, in *GetFollowerNumsReq, opts ...grpc.CallOption) (*GetFollowerNumsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFollowerNumsResp)
	err := c.cc.Invoke(ctx, RelationService_GetFollowerNums_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServiceServer is the server API for RelationService service.
// All implementations must embed UnimplementedRelationServiceServer
// for forward compatibility.
type RelationServiceServer interface {
	Follow(context.Context, *FollowReq) (*Empty, error)
	CancelFollow(context.Context, *CancelFollowReq) (*Empty, error)
	ListFollowing(context.Context, *ListFollowingReq) (*ListFollowingResp, error)
	IsFollowing(context.Context, *IsFollowingReq) (*IsFollowingResp, error)
	ListFollower(context.Context, *ListFollowerReq) (*ListFollowerResp, error)
	ListAllFollower(context.Context, *ListAllFollowerReq) (*ListFollowerResp, error)
	GetFollowingNums(context.Context, *GetFollowingNumsReq) (*GetFollowingNumsResp, error)
	GetFollowerNums(context.Context, *GetFollowerNumsReq) (*GetFollowerNumsResp, error)
	mustEmbedUnimplementedRelationServiceServer()
}

// UnimplementedRelationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRelationServiceServer struct{}

func (UnimplementedRelationServiceServer) Follow(context.Context, *FollowReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedRelationServiceServer) CancelFollow(context.Context, *CancelFollowReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelFollow not implemented")
}
func (UnimplementedRelationServiceServer) ListFollowing(context.Context, *ListFollowingReq) (*ListFollowingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowing not implemented")
}
func (UnimplementedRelationServiceServer) IsFollowing(context.Context, *IsFollowingReq) (*IsFollowingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFollowing not implemented")
}
func (UnimplementedRelationServiceServer) ListFollower(context.Context, *ListFollowerReq) (*ListFollowerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollower not implemented")
}
func (UnimplementedRelationServiceServer) ListAllFollower(context.Context, *ListAllFollowerReq) (*ListFollowerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllFollower not implemented")
}
func (UnimplementedRelationServiceServer) GetFollowingNums(context.Context, *GetFollowingNumsReq) (*GetFollowingNumsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowingNums not implemented")
}
func (UnimplementedRelationServiceServer) GetFollowerNums(context.Context, *GetFollowerNumsReq) (*GetFollowerNumsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerNums not implemented")
}
func (UnimplementedRelationServiceServer) mustEmbedUnimplementedRelationServiceServer() {}
func (UnimplementedRelationServiceServer) testEmbeddedByValue()                         {}

// UnsafeRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServiceServer will
// result in compilation errors.
type UnsafeRelationServiceServer interface {
	mustEmbedUnimplementedRelationServiceServer()
}

func RegisterRelationServiceServer(s grpc.ServiceRegistrar, srv RelationServiceServer) {
	// If the following call pancis, it indicates UnimplementedRelationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RelationService_ServiceDesc, srv)
}

func _RelationService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_Follow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).Follow(ctx, req.(*FollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_CancelFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).CancelFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_CancelFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).CancelFollow(ctx, req.(*CancelFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_ListFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).ListFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_ListFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).ListFollowing(ctx, req.(*ListFollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_IsFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).IsFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_IsFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).IsFollowing(ctx, req.(*IsFollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_ListFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFollowerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).ListFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_ListFollower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).ListFollower(ctx, req.(*ListFollowerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_ListAllFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllFollowerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).ListAllFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_ListAllFollower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).ListAllFollower(ctx, req.(*ListAllFollowerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetFollowingNums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowingNumsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetFollowingNums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_GetFollowingNums_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetFollowingNums(ctx, req.(*GetFollowingNumsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetFollowerNums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowerNumsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetFollowerNums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_GetFollowerNums_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetFollowerNums(ctx, req.(*GetFollowerNumsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationService_ServiceDesc is the grpc.ServiceDesc for RelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relationRpc.RelationService",
	HandlerType: (*RelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "follow",
			Handler:    _RelationService_Follow_Handler,
		},
		{
			MethodName: "cancelFollow",
			Handler:    _RelationService_CancelFollow_Handler,
		},
		{
			MethodName: "listFollowing",
			Handler:    _RelationService_ListFollowing_Handler,
		},
		{
			MethodName: "isFollowing",
			Handler:    _RelationService_IsFollowing_Handler,
		},
		{
			MethodName: "listFollower",
			Handler:    _RelationService_ListFollower_Handler,
		},
		{
			MethodName: "listAllFollower",
			Handler:    _RelationService_ListAllFollower_Handler,
		},
		{
			MethodName: "getFollowingNums",
			Handler:    _RelationService_GetFollowingNums_Handler,
		},
		{
			MethodName: "getFollowerNums",
			Handler:    _RelationService_GetFollowerNums_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/relation.proto",
}
