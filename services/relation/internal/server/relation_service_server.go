// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: relation.proto

package server

import (
	"context"

	"relation/internal/logic"
	"relation/internal/svc"
	"relation/relationRpc"
)

type RelationServiceServer struct {
	svcCtx *svc.ServiceContext
	relationRpc.UnimplementedRelationServiceServer
}

func NewRelationServiceServer(svcCtx *svc.ServiceContext) *RelationServiceServer {
	return &RelationServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *RelationServiceServer) Follow(ctx context.Context, in *relationRpc.FollowReq) (*relationRpc.Empty, error) {
	l := logic.NewFollowLogic(ctx, s.svcCtx)
	return l.Follow(in)
}

func (s *RelationServiceServer) CancelFollow(ctx context.Context, in *relationRpc.CancelFollowReq) (*relationRpc.Empty, error) {
	l := logic.NewCancelFollowLogic(ctx, s.svcCtx)
	return l.CancelFollow(in)
}

func (s *RelationServiceServer) ListFollowing(ctx context.Context, in *relationRpc.ListFollowingReq) (*relationRpc.ListFollowingResp, error) {
	l := logic.NewListFollowingLogic(ctx, s.svcCtx)
	return l.ListFollowing(in)
}

func (s *RelationServiceServer) IsFollowing(ctx context.Context, in *relationRpc.IsFollowingReq) (*relationRpc.IsFollowingResp, error) {
	l := logic.NewIsFollowingLogic(ctx, s.svcCtx)
	return l.IsFollowing(in)
}

func (s *RelationServiceServer) ListFollower(ctx context.Context, in *relationRpc.ListFollowerReq) (*relationRpc.ListFollowerResp, error) {
	l := logic.NewListFollowerLogic(ctx, s.svcCtx)
	return l.ListFollower(in)
}

func (s *RelationServiceServer) GetFollowingNums(ctx context.Context, in *relationRpc.GetFollowingNumsReq) (*relationRpc.GetFollowingNumsResp, error) {
	l := logic.NewGetFollowingNumsLogic(ctx, s.svcCtx)
	return l.GetFollowingNums(in)
}

func (s *RelationServiceServer) GetFollowerNums(ctx context.Context, in *relationRpc.GetFollowerNumsReq) (*relationRpc.GetFollowerNumsResp, error) {
	l := logic.NewGetFollowerNumsLogic(ctx, s.svcCtx)
	return l.GetFollowerNums(in)
}
