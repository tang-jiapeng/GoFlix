// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: auth.proto

package authservice

import (
	"context"

	"GoFlix/services/auth/authRpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AuthenticationReq  = authRpc.AuthenticationReq
	AuthenticationResp = authRpc.AuthenticationResp
	CreateVoucherReq   = authRpc.CreateVoucherReq
	CreateVoucherResp  = authRpc.CreateVoucherResp
	DeleteSessionReq   = authRpc.DeleteSessionReq
	DeleteSessionResp  = authRpc.DeleteSessionResp
	IsActiveReq        = authRpc.IsActiveReq
	IsActiveResp       = authRpc.IsActiveResp
	RefreshSessionReq  = authRpc.RefreshSessionReq
	RefreshSessionResp = authRpc.RefreshSessionResp

	AuthService interface {
		Authentication(ctx context.Context, in *AuthenticationReq, opts ...grpc.CallOption) (*AuthenticationResp, error)
		RefreshSession(ctx context.Context, in *RefreshSessionReq, opts ...grpc.CallOption) (*RefreshSessionResp, error)
		DeleteSession(ctx context.Context, in *DeleteSessionReq, opts ...grpc.CallOption) (*DeleteSessionResp, error)
		CreateVoucher(ctx context.Context, in *CreateVoucherReq, opts ...grpc.CallOption) (*CreateVoucherResp, error)
		IsActive(ctx context.Context, in *IsActiveReq, opts ...grpc.CallOption) (*IsActiveResp, error)
	}

	defaultAuthService struct {
		cli zrpc.Client
	}
)

func NewAuthService(cli zrpc.Client) AuthService {
	return &defaultAuthService{
		cli: cli,
	}
}

func (m *defaultAuthService) Authentication(ctx context.Context, in *AuthenticationReq, opts ...grpc.CallOption) (*AuthenticationResp, error) {
	client := authRpc.NewAuthServiceClient(m.cli.Conn())
	return client.Authentication(ctx, in, opts...)
}

func (m *defaultAuthService) RefreshSession(ctx context.Context, in *RefreshSessionReq, opts ...grpc.CallOption) (*RefreshSessionResp, error) {
	client := authRpc.NewAuthServiceClient(m.cli.Conn())
	return client.RefreshSession(ctx, in, opts...)
}

func (m *defaultAuthService) DeleteSession(ctx context.Context, in *DeleteSessionReq, opts ...grpc.CallOption) (*DeleteSessionResp, error) {
	client := authRpc.NewAuthServiceClient(m.cli.Conn())
	return client.DeleteSession(ctx, in, opts...)
}

func (m *defaultAuthService) CreateVoucher(ctx context.Context, in *CreateVoucherReq, opts ...grpc.CallOption) (*CreateVoucherResp, error) {
	client := authRpc.NewAuthServiceClient(m.cli.Conn())
	return client.CreateVoucher(ctx, in, opts...)
}

func (m *defaultAuthService) IsActive(ctx context.Context, in *IsActiveReq, opts ...grpc.CallOption) (*IsActiveResp, error) {
	client := authRpc.NewAuthServiceClient(m.cli.Conn())
	return client.IsActive(ctx, in, opts...)
}
