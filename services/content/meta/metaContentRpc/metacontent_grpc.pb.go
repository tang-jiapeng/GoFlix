// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: proto/metacontent.proto

package metaContentRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetaContentService_Publish_FullMethodName      = "/metaContentRpc.MetaContentService/publish"
	MetaContentService_Update_FullMethodName       = "/metaContentRpc.MetaContentService/update"
	MetaContentService_Delete_FullMethodName       = "/metaContentRpc.MetaContentService/delete"
	MetaContentService_StatusSearch_FullMethodName = "/metaContentRpc.MetaContentService/statusSearch"
)

// MetaContentServiceClient is the client API for MetaContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaContentServiceClient interface {
	Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*Empty, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Empty, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
	StatusSearch(ctx context.Context, in *StatusSearchReq, opts ...grpc.CallOption) (*StatusSearchResp, error)
}

type metaContentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaContentServiceClient(cc grpc.ClientConnInterface) MetaContentServiceClient {
	return &metaContentServiceClient{cc}
}

func (c *metaContentServiceClient) Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MetaContentService_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaContentServiceClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MetaContentService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaContentServiceClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MetaContentService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaContentServiceClient) StatusSearch(ctx context.Context, in *StatusSearchReq, opts ...grpc.CallOption) (*StatusSearchResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusSearchResp)
	err := c.cc.Invoke(ctx, MetaContentService_StatusSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaContentServiceServer is the server API for MetaContentService service.
// All implementations must embed UnimplementedMetaContentServiceServer
// for forward compatibility.
type MetaContentServiceServer interface {
	Publish(context.Context, *PublishReq) (*Empty, error)
	Update(context.Context, *UpdateReq) (*Empty, error)
	Delete(context.Context, *DeleteReq) (*Empty, error)
	StatusSearch(context.Context, *StatusSearchReq) (*StatusSearchResp, error)
	mustEmbedUnimplementedMetaContentServiceServer()
}

// UnimplementedMetaContentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetaContentServiceServer struct{}

func (UnimplementedMetaContentServiceServer) Publish(context.Context, *PublishReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedMetaContentServiceServer) Update(context.Context, *UpdateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMetaContentServiceServer) Delete(context.Context, *DeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMetaContentServiceServer) StatusSearch(context.Context, *StatusSearchReq) (*StatusSearchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusSearch not implemented")
}
func (UnimplementedMetaContentServiceServer) mustEmbedUnimplementedMetaContentServiceServer() {}
func (UnimplementedMetaContentServiceServer) testEmbeddedByValue()                            {}

// UnsafeMetaContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaContentServiceServer will
// result in compilation errors.
type UnsafeMetaContentServiceServer interface {
	mustEmbedUnimplementedMetaContentServiceServer()
}

func RegisterMetaContentServiceServer(s grpc.ServiceRegistrar, srv MetaContentServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetaContentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetaContentService_ServiceDesc, srv)
}

func _MetaContentService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaContentServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaContentService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaContentServiceServer).Publish(ctx, req.(*PublishReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaContentService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaContentServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaContentService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaContentServiceServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaContentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaContentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaContentService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaContentServiceServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaContentService_StatusSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaContentServiceServer).StatusSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaContentService_StatusSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaContentServiceServer).StatusSearch(ctx, req.(*StatusSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaContentService_ServiceDesc is the grpc.ServiceDesc for MetaContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metaContentRpc.MetaContentService",
	HandlerType: (*MetaContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "publish",
			Handler:    _MetaContentService_Publish_Handler,
		},
		{
			MethodName: "update",
			Handler:    _MetaContentService_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _MetaContentService_Delete_Handler,
		},
		{
			MethodName: "statusSearch",
			Handler:    _MetaContentService_StatusSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/metacontent.proto",
}
