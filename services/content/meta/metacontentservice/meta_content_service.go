// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: metacontent.proto

package metacontentservice

import (
	"context"

	"GoFlix/services/content/meta/metaContentRpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteReq        = metaContentRpc.DeleteReq
	Empty            = metaContentRpc.Empty
	PublishReq       = metaContentRpc.PublishReq
	StatusSearchReq  = metaContentRpc.StatusSearchReq
	StatusSearchResp = metaContentRpc.StatusSearchResp
	UpdateReq        = metaContentRpc.UpdateReq

	MetaContentService interface {
		Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*Empty, error)
		Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Empty, error)
		Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error)
		StatusSearch(ctx context.Context, in *StatusSearchReq, opts ...grpc.CallOption) (*StatusSearchResp, error)
	}

	defaultMetaContentService struct {
		cli zrpc.Client
	}
)

func NewMetaContentService(cli zrpc.Client) MetaContentService {
	return &defaultMetaContentService{
		cli: cli,
	}
}

func (m *defaultMetaContentService) Publish(ctx context.Context, in *PublishReq, opts ...grpc.CallOption) (*Empty, error) {
	client := metaContentRpc.NewMetaContentServiceClient(m.cli.Conn())
	return client.Publish(ctx, in, opts...)
}

func (m *defaultMetaContentService) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	client := metaContentRpc.NewMetaContentServiceClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

func (m *defaultMetaContentService) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	client := metaContentRpc.NewMetaContentServiceClient(m.cli.Conn())
	return client.Delete(ctx, in, opts...)
}

func (m *defaultMetaContentService) StatusSearch(ctx context.Context, in *StatusSearchReq, opts ...grpc.CallOption) (*StatusSearchResp, error) {
	client := metaContentRpc.NewMetaContentServiceClient(m.cli.Conn())
	return client.StatusSearch(ctx, in, opts...)
}
