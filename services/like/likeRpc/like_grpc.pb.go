// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: proto/like.proto

package likeRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LikeService_Like_FullMethodName          = "/likeRpc.LikeService/like"
	LikeService_CancelLike_FullMethodName    = "/likeRpc.LikeService/cancelLike"
	LikeService_ListUserLikes_FullMethodName = "/likeRpc.LikeService/listUserLikes"
	LikeService_ListLikes_FullMethodName     = "/likeRpc.LikeService/listLikes"
	LikeService_GetLikeNums_FullMethodName   = "/likeRpc.LikeService/getLikeNums"
)

// LikeServiceClient is the client API for LikeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LikeServiceClient interface {
	Like(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*Empty, error)
	CancelLike(ctx context.Context, in *CancelLikeReq, opts ...grpc.CallOption) (*Empty, error)
	ListUserLikes(ctx context.Context, in *ListUserLikesReq, opts ...grpc.CallOption) (*ListUserLikesResp, error)
	ListLikes(ctx context.Context, in *ListLikesReq, opts ...grpc.CallOption) (*ListLikesResp, error)
	GetLikeNums(ctx context.Context, in *GetLikeNumsReq, opts ...grpc.CallOption) (*GetLikeNumsResp, error)
}

type likeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLikeServiceClient(cc grpc.ClientConnInterface) LikeServiceClient {
	return &likeServiceClient{cc}
}

func (c *likeServiceClient) Like(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, LikeService_Like_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) CancelLike(ctx context.Context, in *CancelLikeReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, LikeService_CancelLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) ListUserLikes(ctx context.Context, in *ListUserLikesReq, opts ...grpc.CallOption) (*ListUserLikesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserLikesResp)
	err := c.cc.Invoke(ctx, LikeService_ListUserLikes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) ListLikes(ctx context.Context, in *ListLikesReq, opts ...grpc.CallOption) (*ListLikesResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLikesResp)
	err := c.cc.Invoke(ctx, LikeService_ListLikes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *likeServiceClient) GetLikeNums(ctx context.Context, in *GetLikeNumsReq, opts ...grpc.CallOption) (*GetLikeNumsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLikeNumsResp)
	err := c.cc.Invoke(ctx, LikeService_GetLikeNums_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LikeServiceServer is the server API for LikeService service.
// All implementations must embed UnimplementedLikeServiceServer
// for forward compatibility.
type LikeServiceServer interface {
	Like(context.Context, *LikeReq) (*Empty, error)
	CancelLike(context.Context, *CancelLikeReq) (*Empty, error)
	ListUserLikes(context.Context, *ListUserLikesReq) (*ListUserLikesResp, error)
	ListLikes(context.Context, *ListLikesReq) (*ListLikesResp, error)
	GetLikeNums(context.Context, *GetLikeNumsReq) (*GetLikeNumsResp, error)
	mustEmbedUnimplementedLikeServiceServer()
}

// UnimplementedLikeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLikeServiceServer struct{}

func (UnimplementedLikeServiceServer) Like(context.Context, *LikeReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Like not implemented")
}
func (UnimplementedLikeServiceServer) CancelLike(context.Context, *CancelLikeReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelLike not implemented")
}
func (UnimplementedLikeServiceServer) ListUserLikes(context.Context, *ListUserLikesReq) (*ListUserLikesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserLikes not implemented")
}
func (UnimplementedLikeServiceServer) ListLikes(context.Context, *ListLikesReq) (*ListLikesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLikes not implemented")
}
func (UnimplementedLikeServiceServer) GetLikeNums(context.Context, *GetLikeNumsReq) (*GetLikeNumsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLikeNums not implemented")
}
func (UnimplementedLikeServiceServer) mustEmbedUnimplementedLikeServiceServer() {}
func (UnimplementedLikeServiceServer) testEmbeddedByValue()                     {}

// UnsafeLikeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LikeServiceServer will
// result in compilation errors.
type UnsafeLikeServiceServer interface {
	mustEmbedUnimplementedLikeServiceServer()
}

func RegisterLikeServiceServer(s grpc.ServiceRegistrar, srv LikeServiceServer) {
	// If the following call pancis, it indicates UnimplementedLikeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LikeService_ServiceDesc, srv)
}

func _LikeService_Like_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).Like(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeService_Like_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).Like(ctx, req.(*LikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_CancelLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).CancelLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeService_CancelLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).CancelLike(ctx, req.(*CancelLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_ListUserLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserLikesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).ListUserLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeService_ListUserLikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).ListUserLikes(ctx, req.(*ListUserLikesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_ListLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLikesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).ListLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeService_ListLikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).ListLikes(ctx, req.(*ListLikesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LikeService_GetLikeNums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLikeNumsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LikeServiceServer).GetLikeNums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LikeService_GetLikeNums_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LikeServiceServer).GetLikeNums(ctx, req.(*GetLikeNumsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LikeService_ServiceDesc is the grpc.ServiceDesc for LikeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LikeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "likeRpc.LikeService",
	HandlerType: (*LikeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "like",
			Handler:    _LikeService_Like_Handler,
		},
		{
			MethodName: "cancelLike",
			Handler:    _LikeService_CancelLike_Handler,
		},
		{
			MethodName: "listUserLikes",
			Handler:    _LikeService_ListUserLikes_Handler,
		},
		{
			MethodName: "listLikes",
			Handler:    _LikeService_ListLikes_Handler,
		},
		{
			MethodName: "getLikeNums",
			Handler:    _LikeService_GetLikeNums_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/like.proto",
}
