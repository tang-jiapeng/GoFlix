// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: proto/comment.proto

package commentRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommentService_Comment_FullMethodName              = "/commentRpc.CommentService/comment"
	CommentService_DelComment_FullMethodName           = "/commentRpc.CommentService/delComment"
	CommentService_GetCommentListByHot_FullMethodName  = "/commentRpc.CommentService/getCommentListByHot"
	CommentService_GetCommentListByTime_FullMethodName = "/commentRpc.CommentService/getCommentListByTime"
	CommentService_GetReplyCommentList_FullMethodName  = "/commentRpc.CommentService/getReplyCommentList"
	CommentService_GetCommentCount_FullMethodName      = "/commentRpc.CommentService/getCommentCount"
)

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentServiceClient interface {
	Comment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Empty, error)
	DelComment(ctx context.Context, in *DelCommentReq, opts ...grpc.CallOption) (*Empty, error)
	GetCommentListByHot(ctx context.Context, in *GetCommentListByHotReq, opts ...grpc.CallOption) (*CommentListResp, error)
	GetCommentListByTime(ctx context.Context, in *GetCommentListByTimeReq, opts ...grpc.CallOption) (*CommentListResp, error)
	GetReplyCommentList(ctx context.Context, in *GetReplyCommentListReq, opts ...grpc.CallOption) (*CommentListResp, error)
	GetCommentCount(ctx context.Context, in *GetCommentCountReq, opts ...grpc.CallOption) (*GetCommentCountResp, error)
}

type commentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceClient(cc grpc.ClientConnInterface) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) Comment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CommentService_Comment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DelComment(ctx context.Context, in *DelCommentReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CommentService_DelComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetCommentListByHot(ctx context.Context, in *GetCommentListByHotReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentListResp)
	err := c.cc.Invoke(ctx, CommentService_GetCommentListByHot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetCommentListByTime(ctx context.Context, in *GetCommentListByTimeReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentListResp)
	err := c.cc.Invoke(ctx, CommentService_GetCommentListByTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetReplyCommentList(ctx context.Context, in *GetReplyCommentListReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentListResp)
	err := c.cc.Invoke(ctx, CommentService_GetReplyCommentList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetCommentCount(ctx context.Context, in *GetCommentCountReq, opts ...grpc.CallOption) (*GetCommentCountResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentCountResp)
	err := c.cc.Invoke(ctx, CommentService_GetCommentCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
// All implementations must embed UnimplementedCommentServiceServer
// for forward compatibility.
type CommentServiceServer interface {
	Comment(context.Context, *CommentReq) (*Empty, error)
	DelComment(context.Context, *DelCommentReq) (*Empty, error)
	GetCommentListByHot(context.Context, *GetCommentListByHotReq) (*CommentListResp, error)
	GetCommentListByTime(context.Context, *GetCommentListByTimeReq) (*CommentListResp, error)
	GetReplyCommentList(context.Context, *GetReplyCommentListReq) (*CommentListResp, error)
	GetCommentCount(context.Context, *GetCommentCountReq) (*GetCommentCountResp, error)
	mustEmbedUnimplementedCommentServiceServer()
}

// UnimplementedCommentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommentServiceServer struct{}

func (UnimplementedCommentServiceServer) Comment(context.Context, *CommentReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Comment not implemented")
}
func (UnimplementedCommentServiceServer) DelComment(context.Context, *DelCommentReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelComment not implemented")
}
func (UnimplementedCommentServiceServer) GetCommentListByHot(context.Context, *GetCommentListByHotReq) (*CommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentListByHot not implemented")
}
func (UnimplementedCommentServiceServer) GetCommentListByTime(context.Context, *GetCommentListByTimeReq) (*CommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentListByTime not implemented")
}
func (UnimplementedCommentServiceServer) GetReplyCommentList(context.Context, *GetReplyCommentListReq) (*CommentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplyCommentList not implemented")
}
func (UnimplementedCommentServiceServer) GetCommentCount(context.Context, *GetCommentCountReq) (*GetCommentCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentCount not implemented")
}
func (UnimplementedCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {}
func (UnimplementedCommentServiceServer) testEmbeddedByValue()                        {}

// UnsafeCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServiceServer will
// result in compilation errors.
type UnsafeCommentServiceServer interface {
	mustEmbedUnimplementedCommentServiceServer()
}

func RegisterCommentServiceServer(s grpc.ServiceRegistrar, srv CommentServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommentService_ServiceDesc, srv)
}

func _CommentService_Comment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).Comment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_Comment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).Comment(ctx, req.(*CommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DelComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DelComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_DelComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DelComment(ctx, req.(*DelCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetCommentListByHot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentListByHotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetCommentListByHot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_GetCommentListByHot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetCommentListByHot(ctx, req.(*GetCommentListByHotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetCommentListByTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentListByTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetCommentListByTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_GetCommentListByTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetCommentListByTime(ctx, req.(*GetCommentListByTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetReplyCommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplyCommentListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetReplyCommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_GetReplyCommentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetReplyCommentList(ctx, req.(*GetReplyCommentListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetCommentCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetCommentCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_GetCommentCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetCommentCount(ctx, req.(*GetCommentCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentService_ServiceDesc is the grpc.ServiceDesc for CommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commentRpc.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "comment",
			Handler:    _CommentService_Comment_Handler,
		},
		{
			MethodName: "delComment",
			Handler:    _CommentService_DelComment_Handler,
		},
		{
			MethodName: "getCommentListByHot",
			Handler:    _CommentService_GetCommentListByHot_Handler,
		},
		{
			MethodName: "getCommentListByTime",
			Handler:    _CommentService_GetCommentListByTime_Handler,
		},
		{
			MethodName: "getReplyCommentList",
			Handler:    _CommentService_GetReplyCommentList_Handler,
		},
		{
			MethodName: "getCommentCount",
			Handler:    _CommentService_GetCommentCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/comment.proto",
}
