// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: comment.proto

package commentservice

import (
	"context"

	"GoFlix/services/comment/commentRpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CommentListResp         = commentRpc.CommentListResp
	CommentReq              = commentRpc.CommentReq
	DelCommentReq           = commentRpc.DelCommentReq
	Empty                   = commentRpc.Empty
	GetCommentCountReq      = commentRpc.GetCommentCountReq
	GetCommentCountResp     = commentRpc.GetCommentCountResp
	GetCommentListByHotReq  = commentRpc.GetCommentListByHotReq
	GetCommentListByTimeReq = commentRpc.GetCommentListByTimeReq
	GetReplyCommentListReq  = commentRpc.GetReplyCommentListReq

	CommentService interface {
		Comment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Empty, error)
		DelComment(ctx context.Context, in *DelCommentReq, opts ...grpc.CallOption) (*Empty, error)
		GetCommentListByHot(ctx context.Context, in *GetCommentListByHotReq, opts ...grpc.CallOption) (*CommentListResp, error)
		GetCommentListByTime(ctx context.Context, in *GetCommentListByTimeReq, opts ...grpc.CallOption) (*CommentListResp, error)
		GetReplyCommentList(ctx context.Context, in *GetReplyCommentListReq, opts ...grpc.CallOption) (*CommentListResp, error)
		GetCommentCount(ctx context.Context, in *GetCommentCountReq, opts ...grpc.CallOption) (*GetCommentCountResp, error)
	}

	defaultCommentService struct {
		cli zrpc.Client
	}
)

func NewCommentService(cli zrpc.Client) CommentService {
	return &defaultCommentService{
		cli: cli,
	}
}

func (m *defaultCommentService) Comment(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*Empty, error) {
	client := commentRpc.NewCommentServiceClient(m.cli.Conn())
	return client.Comment(ctx, in, opts...)
}

func (m *defaultCommentService) DelComment(ctx context.Context, in *DelCommentReq, opts ...grpc.CallOption) (*Empty, error) {
	client := commentRpc.NewCommentServiceClient(m.cli.Conn())
	return client.DelComment(ctx, in, opts...)
}

func (m *defaultCommentService) GetCommentListByHot(ctx context.Context, in *GetCommentListByHotReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	client := commentRpc.NewCommentServiceClient(m.cli.Conn())
	return client.GetCommentListByHot(ctx, in, opts...)
}

func (m *defaultCommentService) GetCommentListByTime(ctx context.Context, in *GetCommentListByTimeReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	client := commentRpc.NewCommentServiceClient(m.cli.Conn())
	return client.GetCommentListByTime(ctx, in, opts...)
}

func (m *defaultCommentService) GetReplyCommentList(ctx context.Context, in *GetReplyCommentListReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	client := commentRpc.NewCommentServiceClient(m.cli.Conn())
	return client.GetReplyCommentList(ctx, in, opts...)
}

func (m *defaultCommentService) GetCommentCount(ctx context.Context, in *GetCommentCountReq, opts ...grpc.CallOption) (*GetCommentCountResp, error) {
	client := commentRpc.NewCommentServiceClient(m.cli.Conn())
	return client.GetCommentCount(ctx, in, opts...)
}
